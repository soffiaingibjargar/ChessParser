source("elo.R")
dir()
getwd()
setwd(dir = "C:\Users\Soffía\PycharmProjects\ChessParser\Rcode")
setwd(dir = "Users\Soffía\PycharmProjects\ChessParser\Rcode")
setwd(dir = "Users/Soffía/PycharmProjects/ChessParser/Rcode")
setwd(dir = "C:/Users/Soffía/PycharmProjects/ChessParser/Rcode")
getwd()
dir()
source("elo.R")
install.packages("ggplot2")
source("elo.R")
install.packages("shiny")
source("shiny_test.R")
source("shiny_test.R")+
source("shiny_test.R")+
source("shiny_test.R")>
shinyApp(ui = ui, server = server)
source('C:/Users/Soffía/PycharmProjects/ChessParser/Rcode/shiny_test.R')
source("shiny_test.R")
library(shiny)
ui <- fluidPage()
server <- function(input, output) {}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(Hæ Stefanía)
server <- function(input, output) {}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(Hae Stefania)
server <- function(input, output) {}
shinyApp(ui = ui, server = server)
source("shiny_test.R")
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
sliderInput(inputId = "num",
label = "Choose a number",
value = 25, min = 1, max = 100),
plotOutput("hist")
)
server <- function(input, output) {
output$hist <- renderPlot({
hist(rnorm(input$num))
})
}
shinyApp(ui = ui, server = server)
value = 27, min = 1, max = 127),
value = 25, min = 1, max = 127),
source("shiny_test.R")
library(shiny)
ui <- fluidPage(
sliderInput(inputId = "num",
label = "Choose a number",
value = 25, min = 1, max = 100),
plotOutput("hist")
)
server <- function(input, output) {
output$hist <- renderPlot({
hist(rnorm(input$num))
})
}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
sliderInput(inputId = "num",
label = "Choose a number",
value = 27, min = 1, max = 127),
plotOutput("hist")
)
server <- function(input, output) {
output$hist <- renderPlot({
hist(rnorm(input$num))
})
}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
sliderInput(inputId = "num",
label = "Choose a number",
value = 25, min = 1, max = 100),
plotOutput("hist")
)
server <- function(input, output) {
output$hist <- renderPlot({
hist(rnorm(input$num))
})
}
shinyApp(ui = ui, server = server)
# 01-kmeans-app
palette(c("#E41A1C", "#377EB8", "#4DAF4A", "#984EA3",
"#FF7F00", "#FFFF33", "#A65628", "#F781BF", "#999999"))
library(shiny)
ui <- fluidPage(
headerPanel('Iris k-means clustering'),
sidebarPanel(
selectInput('xcol', 'X Variable', names(iris)),
selectInput('ycol', 'Y Variable', names(iris),
selected = names(iris)[[2]]),
numericInput('clusters', 'Cluster count', 3,
min = 1, max = 9)
),
mainPanel(
plotOutput('plot1')
)
)
server <- function(input, output) {
selectedData <- reactive({
iris[, c(input$xcol, input$ycol)]
})
clusters <- reactive({
kmeans(selectedData(), input$clusters)
})
output$plot1 <- renderPlot({
par(mar = c(5.1, 4.1, 0, 1))
plot(selectedData(),
col = clusters()$cluster,
pch = 20, cex = 3)
points(clusters()$centers, pch = 4, cex = 4, lwd = 4)
})
}
shinyApp(ui = ui, server = server)
shiny::runApp()
install.packages('devtools')
devtools::install_github('rstudio/shinyapps')
names(tags)
# 05-tabs.R
library(shiny)
ui <- fluidPage(title = "Random generator",
tabsetPanel(
tabPanel(title = "Normal data",
plotOutput("norm"),
actionButton("renorm", "Resample")
),
tabPanel(title = "Uniform data",
plotOutput("unif"),
actionButton("reunif", "Resample")
),
tabPanel(title = "Chi Squared data",
plotOutput("chisq"),
actionButton("rechisq", "Resample")
)
)
)
server <- function(input, output) {
rv <- reactiveValues(
norm = rnorm(500),
unif = runif(500),
chisq = rchisq(500, 2))
observeEvent(input$renorm, { rv$norm <- rnorm(500) })
observeEvent(input$reunif, { rv$unif <- runif(500) })
observeEvent(input$rechisq, { rv$chisq <- rchisq(500, 2) })
output$norm <- renderPlot({
hist(rv$norm, breaks = 30, col = "grey", border = "white",
main = "500 random draws from a standard normal distribution")
})
output$unif <- renderPlot({
hist(rv$unif, breaks = 30, col = "grey", border = "white",
main = "500 random draws from a standard uniform distribution")
})
output$chisq <- renderPlot({
hist(rv$chisq, breaks = 30, col = "grey", border = "white",
main = "500 random draws from a Chi Square distribution with two degree of freedom")
})
}
shinyApp(server = server, ui = ui)
# 06-navlist.R
library(shiny)
ui <- navbarPage(title = "Random generator",
tabPanel(title = "Normal data",
plotOutput("norm"),
actionButton("renorm", "Resample")
),
tabPanel(title = "Uniform data",
plotOutput("unif"),
actionButton("reunif", "Resample")
),
tabPanel(title = "Chi Squared data",
plotOutput("chisq"),
actionButton("rechisq", "Resample")
)
)
server <- function(input, output) {
rv <- reactiveValues(
norm = rnorm(500),
unif = runif(500),
chisq = rchisq(500, 2))
observeEvent(input$renorm, { rv$norm <- rnorm(500) })
observeEvent(input$reunif, { rv$unif <- runif(500) })
observeEvent(input$rechisq, { rv$chisq <- rchisq(500, 2) })
output$norm <- renderPlot({
hist(rv$norm, breaks = 30, col = "grey", border = "white",
main = "500 random draws from a standard normal distribution")
})
output$unif <- renderPlot({
hist(rv$unif, breaks = 30, col = "grey", border = "white",
main = "500 random draws from a standard uniform distribution")
})
output$chisq <- renderPlot({
hist(rv$chisq, breaks = 30, col = "grey", border = "white",
main = "500 random draws from a Chi Square distribution with two degree of freedom")
})
}
shinyApp(server = server, ui = ui)
shiny::runApp()
source("elo.R")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
install.packages("shinydashboard")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
source('C:/Users/Soffía/PycharmProjects/ChessParser/Rcode/app.R')
runApp()
install.packages("heatmap3")
runApp()
shiny::runApp()
# 04-well.R
library(shiny)
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
sliderInput(inputId = "num",
label = "Choose a number",
value = 25, min = 1, max = 100),
textInput(inputId = "title",
label = "Write a title",
value = "Histogram of Random Normal Values")
),
mainPanel(
plotOutput("hist")
)
)
)
server <- function(input, output) {
output$hist <- renderPlot({
hist(rnorm(input$num), main = input$title)
})
}
shinyApp(ui = ui, server = server)
# 06-navlist.R
library(shiny)
ui <- navbarPage(title = "Random generator",
tabPanel(title = "Normal data",
plotOutput("norm"),
actionButton("renorm", "Resample")
),
tabPanel(title = "Uniform data",
plotOutput("unif"),
actionButton("reunif", "Resample")
),
tabPanel(title = "Chi Squared data",
plotOutput("chisq"),
actionButton("rechisq", "Resample")
)
)
server <- function(input, output) {
rv <- reactiveValues(
norm = rnorm(500),
unif = runif(500),
chisq = rchisq(500, 2))
observeEvent(input$renorm, { rv$norm <- rnorm(500) })
observeEvent(input$reunif, { rv$unif <- runif(500) })
observeEvent(input$rechisq, { rv$chisq <- rchisq(500, 2) })
output$norm <- renderPlot({
hist(rv$norm, breaks = 30, col = "grey", border = "white",
main = "500 random draws from a standard normal distribution")
})
output$unif <- renderPlot({
hist(rv$unif, breaks = 30, col = "grey", border = "white",
main = "500 random draws from a standard uniform distribution")
})
output$chisq <- renderPlot({
hist(rv$chisq, breaks = 30, col = "grey", border = "white",
main = "500 random draws from a Chi Square distribution with two degree of freedom")
})
}
shinyApp(server = server, ui = ui)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?par
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
